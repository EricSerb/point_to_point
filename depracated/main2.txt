#include "lemon_graph.h"

#include <ctime>
#include <functional>
#include <thread>
#include <mutex>
#include <chrono>

#define WEIGHTEDMATCHING 0
#define KRUSKAL 1
#define DIJKSTRA 2
#define KRUSKDIJK 3
#define KRUSKDIJKSEQ 4
#define DIJKSTRASEQ 5


void printResult(std::string, int, float);
void timeit(void(Lemon::*fptr)(void), Lemon& L, int i);
void timeit2(void(Lemon::*spanTree)(void), void(Lemon::*shortPath)(void), Lemon& L, int i);
void timeit(void(Data::*)(void), Data&);

std::mutex mu;
typedef std::chrono::milliseconds milliseconds;
typedef std::chrono::microseconds microseconds;
typedef std::chrono::seconds seconds;

int main(int argc, char *argv[]) {
	
	if (argc < 3){
		std::cout << "Must pass in int to determine alg to run and int
		to determine testfile size...." << std::endl;
		exit(0);
	}

	std::string testSyntheticFile = "n";
	testSyntheticFile.append(to_string(argv[2]));
	testSythesticFile.append(".dat");
	std::string testSyntheticGraph = "n";
	testSyntheticGraph.append(to_string(argv[2]));
	testSyntheticGraph.append(".graph");
	DataFile N10(testSyntheticFile, atoi(argv[2]));
	Data D0(N10);
	//timeit(&Data::createGraph, D0); 
	D0.createGraph();
	D0.outputGraph(testSyntheticGraph);
	D0.importGraph(testSyntheticGraph);
	lemon::ListGraph D0_LG, D0_LG2, D0_LG3;
	Lemon D0_L(D0.getGraph(), &D0_LG);
	Lemon D0_L2(D0.getGraph(), &D0_LG2);
        Lemon D0_L3(D0.getGraph(), &D0_LG3);
	//std::cout << "Starting Algos" << std::endl;
	if(atoi(argv[1]) == 0){
		std::cout << "****************************************************************" << std::endl;
		timeit(&Lemon::initDistributionCenterSeq, D0_L, DIJKSTRASEQ);
		std::cout << "****************************************************************" << std::endl;
	}
	else if(atoi(argv[1]) == 1){
		std::cout << "****************************************************************" << std::endl;
		timeit(&Lemon::initDistributionCenter, D0_L, DIJKSTRA);
		std::cout << "****************************************************************" << std::endl;
	}
	else if(atoi(argv[1]) == 2){
		std::cout << "****************************************************************" << std::endl;
		timeit2(&Lemon::kruskalsTrim, &Lemon::initDistributionCenterSeq, D0_L2, KRUSKDIJKSEQ);
		std::cout << "****************************************************************" << std::endl;
	}
	else{
		std::cout << "****************************************************************" << std::endl;
		timeit2(&Lemon::kruskalsTrim, &Lemon::initDistributionCenter, D0_L3, KRUSKDIJK);
		std::cout << "****************************************************************" << std::endl;
	}
	//timeit(&Lemon::kruskalsTrim, D0_L, KRUSKAL);

	exit(0);

	std::cout << "\nTesting KN57\n-------------------\n\n";
	DataFile KN57("KN57/dist.txt", 57);
	Data D1(KN57);
    	D1.createGraph();
	D1.outputGraph("KN57/test_out.txt");
	D1.importGraph("KN57/test_out.txt");

        lemon::ListGraph LG, LG2, LG3;
	Lemon L(D1.getGraph(), &LG);
        Lemon L2(D1.getGraph(), &LG2);
        Lemon L3(D1.getGraph(), &LG3);

        timeit(&Lemon::initDistributionCenterSeq, L, DIJKSTRASEQ);
	timeit(&Lemon::initDistributionCenter, L, DIJKSTRA);
    
        timeit2(&Lemon::kruskalsTrim, &Lemon::initDistributionCenterSeq, L2, KRUSKDIJKSEQ);
	timeit2(&Lemon::kruskalsTrim, &Lemon::initDistributionCenter, L3, KRUSKDIJK);
       
	timeit(&Lemon::kruskalsTrim, L, KRUSKAL);

	std::cout << "\nTesting HA30\n-------------------\n\n";
	DataFile HA30("HA30/dist.txt", 30);
	Data D2(HA30);
    	D2.createGraph();
	D2.outputGraph("HA30/test_out.txt");
	D2.importGraph("HA30/test_out.txt");
        lemon::ListGraph LG4, LG5, LG6;
	Lemon L4(D2.getGraph(), &LG4);
        Lemon L5(D2.getGraph(), &LG5);
        Lemon L6(D2.getGraph(), &LG6);

        //timeit(&Lemon::initDistributionCenterSeq, L4, DIJKSTRASEQ);
	timeit(&Lemon::initDistributionCenter, L4, DIJKSTRA);
    
        //timeit2(&Lemon::kruskalsTrim, &Lemon::initDistributionCenterSeq, L5, KRUSKDIJKSEQ);
	timeit2(&Lemon::kruskalsTrim, &Lemon::initDistributionCenter, L6, KRUSKDIJK);

	timeit(&Lemon::kruskalsTrim, L4, KRUSKAL);

        /*
        lemon::ListGraph LG2;
        Lemon L2(D1.getGraph(), &LG2);
        std::thread pureDijkstra ([&] {timeit(&Lemon::initDistributionCenter, L2, DIJKSTRA);});
	std::thread KruskalDijkstra ([&] {timeit2(&Lemon::kruskalsTrim, &Lemon::initDistributionCenter, L2, KRUSKDIJK);});

	pureDijkstra.join();
	KruskalDijkstra.join();
        */
	
	
        /*
        std::thread pureDijkstraSeq ([&] {timeit(&Lemon::initDistributionCenterSeq, L, DIJKSTRASEQ);});
	std::thread pureDijkstra ([&] {timeit(&Lemon::initDistributionCenter, L, DIJKSTRA);});
    
        std::thread KruskalDijkstraSeq ([&] {timeit2(&Lemon::kruskalsTrim, &Lemon::initDistributionCenterSeq, L, KRUSKDIJKSEQ);});
	std::thread KruskalDijkstra ([&] {timeit2(&Lemon::kruskalsTrim, &Lemon::initDistributionCenter, L, KRUSKDIJK);});

        pureDijkstraSeq.join();
	pureDijkstra.join();
        KruskalDijkstraSeq.join();
	KruskalDijkstra.join();
        */
	return 0;
}

/*
 * #timeit(void(Lemon::*fptr)(void), Lemon&, int)
 *
 * @Parameters:		Pointer to a lemon function, the Lemon object, and an int
 * 			index into the funcName vector
 * @Fucntionality:	Times the functions passed to be used for a comparison of running time
 * @Return:		
 *
 */
void timeit(void(Lemon::*fptr)(void), Lemon& L, int i) {
	//clock_t beg = clock();
        
        seconds beg = std::chrono::duration_cast<seconds>
                    (std::chrono::system_clock::now().time_since_epoch()); 

	(L.*fptr)();

	seconds end = std::chrono::duration_cast<seconds>
                    (std::chrono::system_clock::now().time_since_epoch());
        	
	std::cout << "Time it took " << L.funcName[i] << " to complete: " << end.count() - beg.count() << "\n\n";


	//int minute = result / 60;
	//float seconds = result - (minute * 60);

	//Can either pass the algName as a parameter or we can 
	//printResult(L.funcName[i], minute, seconds);
	
}

/*
 * #timeit2(void(Lemon::*fptr)(void), void(Lemon::*fptr)(void), Lemon&, int)
 *
 * @Parameters:		Pointer to a lemon function, Pointer to a lemon function, the Lemon object, and an int
 * 			index into the funcName vector
 * @Fucntionality:	Times the functions passed to be used for a comparison of running time
 * @Return:		
 *
 */
void timeit2(void(Lemon::*spanTree)(void), void(Lemon::*shortPath)(void), Lemon& L, int i){
	//clock_t beg = clock();
        seconds beg = std::chrono::duration_cast<seconds>
                    (std::chrono::system_clock::now().time_since_epoch()); 

	(L.*spanTree)();
	(L.*shortPath)();

        seconds end = std::chrono::duration_cast<seconds>
                    (std::chrono::system_clock::now().time_since_epoch());
        	
	std::cout << "Time it took " << L.funcName[i] << " to complete: " << end.count() - beg.count() << "\n\n";

	//float result = ((float)(clock() - beg)) / CLOCKS_PER_SEC;

	//int minute = result / 60;
	//float seconds = result - (minute * 60);

	//Can either pass the algName as a parameter or we can 
	//printResult(L.funcName[i], minute, seconds);
}

/*
 * #timeit(void(Data::*fptr)(void), Data&)
 *
 * @Parameters:		Pointer to a Data function, the Data object
 * @Fucntionality:	Times the functions passed to be used for a comparison of running time
 * @Return:		
 *
 */
void timeit(void(Data::*fptr)(void), Data& D) {
	//clock_t beg = clock();
        seconds beg = std::chrono::duration_cast<seconds>
                    (std::chrono::system_clock::now().time_since_epoch()); 

        (D.*fptr)();

        seconds end = std::chrono::duration_cast<seconds>
                    (std::chrono::system_clock::now().time_since_epoch());
        	
	std::cout << "Time it took to complete: " << end.count() - beg.count() << "\n\n";


	//clock_t res = clock() - beg;
	//float result = ((float)res) / CLOCKS_PER_SEC;
	//std::cout << "\n" << result << "s\n";
}

/*This function allows us to print the times for each function on seperate threads
 * without the chance of them trying to print out at the same time*/


/*
 * #printResult(string, float)
 *
 * @Parameters:		the string is the name of an algorithm being run and the in is the
 * 			time it took to run the algorithm
 * @Fucntionality:	Prints the time it took to run an algorithm
 * @Return:		
 *
 * @Note: 		The mutex is not needed with the currently implementation since the algorithms
 * 			are run sequentially and not in parallel
 */
void printResult(std::string algName, int min, float sec){
	mu.lock();
	
	std::cout << "Time it took " << algName << " to complete: " << min << ":" << sec << "\n\n";
	//could also store results here if we wanted to use them for comparison later
	
	mu.unlock();
}

